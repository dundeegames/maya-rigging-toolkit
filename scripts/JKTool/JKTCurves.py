"""Module for creating Control Curve Shapes
@file CtrlCurves.py
@details    creates UI for my tool

@author     Jiri Klic
@version    1.0
@date       December 2015
@pre        
@post       
@bug        No known bugs
@warning    
@todo       

@copyright  University of Abertay - Dundee.2013.
			Intellectual Property Policy.[online].Available from: 
			http://www.abertay.ac.uk/media/Intellectual-Property-Policy-v2-01.pdf
			[Accessed 22 April 2015].
"""

import maya.cmds as mc

# Base curve
def baseShape():
	"""Creates Base Shape around the origin"""
	return mc.curve(p=[(0.0, 0.0, -72.6), (24.75, 0.0, -47.85), (11.55, 0.0, -47.85), (11.55, 0.0, -44.55), (17.82, 0.0, -42.9), (23.1, 0.0, -40.425), (28.38, 0.0, -37.125), (33.0, 0.0, -33.0), (37.125, 0.0, -28.38), (40.425, 0.0, -23.1), (42.9, 0.0, -17.82), (44.55, 0.0, -11.55), (47.85, 0.0, -11.55), (47.85, 0.0, -24.75), (72.6, 0.0, 0.0), (47.85, 0.0, 24.75), (47.85, 0.0, 11.55), (44.55, 0.0, 11.55), (42.9, 0.0, 17.82), (40.425, 0.0, 23.1), (37.125, 0.0, 28.38), (33.0, 0.0, 33.0), (28.38, 0.0, 37.125), (23.1, 0.0, 40.425), (17.82, 0.0, 42.9), (11.55, 0.0, 44.55), (11.55, 0.0, 47.85), (24.75, 0.0, 47.85), (0.0, 0.0, 72.6), (-24.75, 0.0, 47.85), (-11.55, 0.0, 47.85), (-11.55, 0.0, 44.55), (-17.82, 0.0, 42.9), (-23.1, 0.0, 40.425), (-28.38, 0.0, 37.125), (-33.0, 0.0, 33.0), (-37.125, 0.0, 28.38), (-40.425, 0.0, 23.1), (-42.9, 0.0, 17.82), (-44.55, 0.0, 11.55), (-47.85, 0.0, 11.55), (-47.85, 0.0, 24.75), (-72.6, 0.0, 0.0), (-47.85, 0.0, -24.75), (-47.85, 0.0, -11.55), (-44.55, 0.0, -11.55), (-42.9, 0.0, -17.82), (-40.425, 0.0, -23.1), (-37.125, 0.0, -28.38), (-33.0, 0.0, -33.0), (-28.38, 0.0, -37.125), (-23.1, 0.0, -40.425), (-17.82, 0.0, -42.9), (-11.55, 0.0, -44.55), (-11.55, 0.0, -47.85), (-24.75, 0.0, -47.85), (0.0, 0.0, -72.6)],d=1)


# Cube
def cubeShape():
	"""Creates Cube Shape"""
	return mc.curve(p=[[-1.0, -1.0, -1.0], [1.0, -1.0, -1.0], [1.0, -1.0, 1.0], [-1.0, -1.0, 1.0], [-1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, -1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, -1.0], [1.0, -1.0, -1.0], [1.0, 1.0, -1.0], [-1.0, 1.0, -1.0], [-1.0, -1.0, -1.0], [-1.0, 1.0, -1.0], [-1.0, 1.0, 1.0], [-1.0, -1.0, 1.0], [-1.0, -1.0, -1.0]],d=1)


# # L Foot
# l_foot = mc.curve(p=[[17.025, 6.588, -7.33], [11.335, 8.823, -6.756], [6.544, 7.096, -7.2], [4.733, 3.301, -7.15], [4.772, 0.001, -2.573], [6.581, 0.001, 4.297], [3.872, 0.001, 14.404], [11.121, 0.001, 13.98], [18.885, 0.001, 14.404], [20.769, 0.001, 10.891], [18.458, 0.001, -3.427], [19.212, 4.287, -8.334]],d=3)
# mc.closeCurve( l_foot, ps=0, rpo=True )


# # L Toe
# l_toe = mc.curve(p=[(4.822, 0.0, 13.873), (11.51, 0.0, 14.763), (19.782, 0.0, 13.873), (20.582, 0.0, 17.876), (17.328, 0.0, 23.695), (11.51, 0.0, 26.105), (6.46, 0.0, 23.695), (5.161, 0.0, 17.876)],d=3)
# mc.closeCurve( l_toe, ps=0, rpo=True )


# L footprint
def footShape():
	"""Creates Foot Shape"""
	return mc.curve(p=[(7.821, 0.0, 15.829), (7.689, 0.0, 8.437), (11.744, 0.0, 4.312), (12.443, 0.0, -1.316), (12.768, 0.0, -3.935), (12.728, 0.0, -10.238), (11.702, 0.0, -13.804), (8.399, 0.0, -25.277), (10.019, 0.0, -26.467), (10.396, 0.0, -27.174), (12.039, 0.0, -29.846), (15.196, 0.0, -32.488), (19.78, 0.0, -31.196), (24.586, 0.0, -29.841), (25.947, 0.0, -24.801), (27.365, 0.0, -20.048), (28.303, 0.0, -16.904), (28.88, 0.0, -13.549), (29.623, 0.0, -10.171), (30.39, 0.0, -6.589), (32.311, 0.0, 10.64), (31.881, 0.0, 14.806), (31.529, 0.0, 17.72), (30.61, 0.0, 21.96), (28.953, 0.0, 24.79), (24.442, 0.0, 32.488), (15.401, 0.0, 31.567), (11.173, 0.0, 25.954), (7.977, 0.0, 21.712), (7.865, 0.0, 16.449), (7.821, 0.0, 15.829)],d=3)
	
	
# L Eye
def eyeShapeL():
	"""Creates Left Eye Shape"""
	return mc.curve(p=[(1.719, 0.773, -0.0), (1.727, 0.717, -0.0), (1.733, 0.661, -0.0), (1.733, 0.603, -0.0), (1.733, -0.011, 0.0), (1.235, -0.508, 0.0), (0.621, -0.508, 0.0), (0.007, -0.508, 0.0), (-0.491, -0.011, -0.0), (-0.491, 0.603, -0.0), (-0.491, 0.835, -0.0), (-0.42, 1.05, -0.0), (-0.298, 1.228, -0.0), (-1.222, 1.04, -0.0), (-2.514, 0.018, -0.0), (-2.518, 0.015, -0.0), (-2.06, -0.574, -0.0), (-1.079, -1.228, 0.0), (-0.36, -1.228, 0.0), (1.21, -1.228, 0.0), (2.06, -0.705, 0.0), (2.518, 0.146, 0.0), (2.341, 0.373, 0.0), (2.055, 0.591, -0.0), (1.719, 0.773, -0.0)],d=3)


# R Eye
def eyeShapeR():
	"""Creates Right Eye Shape"""
	return mc.curve(p=[(-1.719, 0.773, -0.0), (-1.727, 0.717, -0.0), (-1.733, 0.661, -0.0), (-1.733, 0.603, -0.0), (-1.733, -0.011, -0.0), (-1.235, -0.508, 0.0), (-0.621, -0.508, 0.0), (-0.007, -0.508, 0.0), (0.491, -0.011, 0.0), (0.491, 0.603, -0.0), (0.491, 0.835, -0.0), (0.42, 1.05, -0.0), (0.298, 1.228, -0.0), (1.222, 1.04, -0.0), (2.514, 0.018, 0.0), (2.518, 0.015, 0.0), (2.06, -0.574, 0.0), (1.079, -1.228, 0.0), (0.36, -1.228, 0.0), (-1.21, -1.228, 0.0), (-2.06, -0.705, 0.0), (-2.518, 0.146, -0.0), (-2.341, 0.373, -0.0), (-2.055, 0.591, -0.0), (-1.719, 0.773, -0.0)],d=3)


# Sight
def sightShape():
	"""Creates Parent Shape for Left and Right Eye Shape"""
	return mc.curve(p=[(9.064, -0.0, 0.0), (9.064, -1.917, 0.0), (5.006, -3.471, 0.0), (-0.0, -3.471, 0.0), (-5.006, -3.471, 0.0), (-9.064, -1.917, -0.0), (-9.064, -0.0, -0.0), (-9.064, 1.917, -0.0), (-5.006, 3.471, -0.0), (-0.0, 3.471, -0.0), (5.006, 3.471, -0.0), (9.064, 1.917, 0.0), (9.064, -0.0, 0.0)],d=3)


# 4-way flat arrow
def flatArrow4():
	"""Creates 4-way flat arrow Shape"""
	return mc.curve(p=[(0.0, -4.95, -0.0), (1.98, -2.97, -0.0), (0.99, -2.97, -0.0), (0.99, -1.98, -0.0), (1.98, -0.99, -0.0), (2.97, -0.99, -0.0), (2.97, -1.98, -0.0), (4.95, 0.0, 0.0), (2.97, 1.98, 0.0), (2.97, 0.99, 0.0), (1.98, 0.99, 0.0), (0.99, 1.98, 0.0), (0.99, 2.97, 0.0), (1.98, 2.97, 0.0), (0.0, 4.95, 0.0), (-1.98, 2.97, 0.0), (-0.99, 2.97, 0.0), (-0.99, 1.98, 0.0), (-1.98, 0.99, 0.0), (-2.97, 0.99, 0.0), (-2.97, 1.98, 0.0), (-4.95, 0.0, 0.0), (-2.97, -1.98, -0.0), (-2.97, -0.99, -0.0), (-1.98, -0.99, -0.0), (-0.99, -1.98, -0.0), (-0.99, -2.97, -0.0), (-1.98, -2.97, -0.0), (0.0, -4.95, -0.0)],d=1)


# 4-way bend arrow
def bendArrow4():
	"""Creates 4-way bend arrow Shape"""
	return mc.curve(p=[(-42.355, -2.785, -6.806), (-42.355, -2.785, -6.806), (-42.355, -2.785, -6.806), (-42.355, -2.785, -6.806), (-41.625, -4.685, -5.553), (-40.783, -6.135, -4.281), (-39.818, -7.158, -2.971), (-39.769, -7.296, -3.43), (-39.72, -7.434, -3.888), (-39.672, -7.572, -4.347), (-38.011, -9.796, -4.002), (-36.204, -11.352, -3.656), (-34.171, -12.218, -3.297), (-34.435, -11.723, -1.13), (-34.536, -10.524, 0.958), (-34.498, -8.657, 3.039), (-34.921, -8.44, 2.963), (-35.344, -8.223, 2.888), (-35.767, -8.007, 2.812), (-34.753, -7.398, 4.327), (-33.672, -6.352, 5.799), (-32.51, -4.849, 7.248), (-31.635, -6.779, 6.144), (-30.645, -8.259, 5.022), (-29.528, -9.314, 3.868), (-30.002, -9.343, 3.792), (-30.477, -9.371, 3.716), (-30.951, -9.4, 3.64), (-30.99, -11.267, 1.558), (-30.888, -12.466, -0.529), (-30.625, -12.961, -2.697), (-28.415, -12.985, -2.338), (-26.136, -12.284, -1.992), (-23.722, -10.915, -1.647), (-23.771, -10.777, -1.188), (-23.819, -10.639, -0.73), (-23.868, -10.5, -0.271), (-22.22, -10.025, -1.139), (-20.523, -9.107, -1.982), (-18.755, -7.732, -2.811), (-20.186, -9.178, -4.063), (-21.54, -10.168, -5.336), (-22.835, -10.717, -6.646), (-22.935, -10.824, -6.187), (-23.035, -10.931, -5.729), (-23.135, -11.038, -5.27), (-25.549, -12.408, -5.615), (-27.828, -13.108, -5.961), (-30.037, -13.084, -6.32), (-29.598, -12.737, -8.487), (-29.023, -11.679, -10.575), (-28.309, -9.954, -12.656), (-27.834, -9.925, -12.58), (-27.36, -9.897, -12.504), (-26.886, -9.868, -12.428), (-27.57, -8.904, -13.944), (-28.139, -7.511, -15.416), (-28.6, -5.668, -16.865), (-30.177, -7.084, -15.761), (-31.678, -8.043, -14.639), (-33.124, -8.56, -13.484), (-32.701, -8.777, -13.408), (-32.278, -8.994, -13.333), (-31.855, -9.211, -13.257), (-32.569, -10.936, -11.175), (-33.144, -11.993, -9.088), (-33.584, -12.341, -6.92), (-35.617, -11.475, -7.28), (-37.423, -9.919, -7.625), (-39.084, -7.695, -7.97), (-38.984, -7.588, -8.429), (-38.884, -7.481, -8.887), (-38.784, -7.374, -9.345), (-40.102, -6.277, -8.478), (-41.288, -4.755, -7.635), (-42.355, -2.785, -6.806)],d=3)


# Chest
def chestShape():
	"""Creates Chest Shape"""
	return mc.curve(p=[(-14.274, -9.897, -10.278), (14.274, -9.897, -10.278), (14.274, -12.373, 12.695), (-14.274, -12.373, 12.695), (-13.439, 10.857, 5.431), (13.439, 10.857, 5.431), (14.274, -12.373, 12.695), (13.439, 10.857, 5.431), (14.894, 12.373, -12.695), (14.274, -9.897, -10.278), (14.894, 12.373, -12.695), (-14.894, 12.373, -12.695), (-14.274, -9.897, -10.278), (-14.894, 12.373, -12.695), (-13.439, 10.857, 5.431), (-14.274, -12.373, 12.695), (-14.274, -9.897, -10.278)],d=1)


# Hips
def hipShape():
	"""Creates Hip Shape"""
	return mc.curve(p=[(-18.129, -9.13, -13.83), (18.129, -9.13, -13.83), (18.129, -9.13, 13.83), (-18.129, -9.13, 13.83), (-16.473, 9.13, 12.967), (16.473, 9.13, 12.967), (18.129, -9.13, 13.83), (16.473, 9.13, 12.967), (16.473, 9.13, -12.545), (18.129, -9.13, -13.83), (16.473, 9.13, -12.545), (-16.473, 9.13, -12.545), (-18.129, -9.13, -13.83), (-16.473, 9.13, -12.545), (-16.473, 9.13, 12.967), (-18.129, -9.13, 13.83), (-18.129, -9.13, -13.83)],d=1)


# Neck
def neckShape():
	"""Creates Neck Shape"""
	neckCurve = mc.curve(p=[(7.758, 3.084, -6.415), (-0.0, 2.02, -9.485), (-7.758, 3.084, -6.415), (-10.971, 2.57, 0.453), (-7.758, 0.704, 7.083), (-0.0, -1.346, 9.603), (7.758, 0.704, 7.083), (10.971, 2.57, 0.453)],d=3)
	mc.closeCurve( neckCurve, ps=0, rpo=True )
	return neckCurve


# Chin
def chinShape():
	"""Creates Chin Shape"""
	chinCurve = mc.curve(p=[(-3.064, 1.727, 0.65), (-4.415, 1.349, 3.057), (-3.224, 3.391, 4.757), (-0.258, 4.033, 6.105), (2.729, 3.324, 4.838), (4.003, 1.256, 3.172), (2.888, 1.661, 0.731), (0.024, 1.882, -2.272)],d=3)
	mc.closeCurve( chinCurve, ps=0, rpo=True )
	return chinCurve


# Sphere
def sphereShape():
	return mc.curve(p=[(2.014, 0.0, 0.0), (1.861, 0.001, -0.771), (1.424, 0.0, -1.424), (0.771, 0.0, -1.861), (0.0, 0.0, -2.014), (-0.771, 0.0, -1.861), (-1.424, 0.0, -1.424), (-1.861, -0.001, -0.771), (-2.014, 0.0, 0.0), (-1.861, 0.0, 0.771), (-1.424, -0.001, 1.425), (-0.771, -0.001, 1.861), (0.0, 0.0, 2.014), (0.771, -0.001, 1.861), (1.424, -0.001, 1.425), (1.861, -0.0, 0.771), (2.014, -0.0, 0.0), (1.861, 0.77, -0.0), (1.424, 1.424, 0.0), (0.771, 1.86, 0.0), (0.0, 2.015, 0.0), (-0.771, 1.86, 0.0), (-1.424, 1.424, 0.0), (-1.861, 0.77, -0.0), (-2.014, 0.0, 0.0), (-1.861, -0.771, 0.0), (-1.424, -1.425, 0.0), (-0.771, -1.861, 0.0), (0.0, -2.015, 0.0), (0.771, -1.861, 0.0), (1.424, -1.425, 0.0), (1.861, -0.771, 0.0), (2.014, 0.0, 0.0), (1.861, 0.77, 0.0), (1.424, 1.424, 0.0), (0.771, 1.86, 0.0), (0.0, 2.015, 0.0), (0.0, 1.424, 1.425), (0.0, 0.0, 2.014), (0.0, -1.424, 1.424), (0.0, -2.015, -0.0), (0.0, -1.425, -1.425), (0.0, 0.0, -2.014), (0.0, 1.424, -1.424), (0.0, 2.015, 0.0)],d=1)


# Cross
def crossShape():
	"""Creates Cross Shape"""
	return mc.curve(p=[(1.696, 8.942, 0.0), (1.696, 6.661, 0.0), (3.978, 6.661, 0.0), (3.978, 3.046, 0.0), (1.696, 3.046, 0.0), (1.696, 0.764, 0.0), (-1.919, 0.764, 0.0), (-1.919, 3.046, 0.0), (-4.201, 3.046, 0.0), (-4.201, 6.661, 0.0), (-1.919, 6.661, 0.0), (-1.919, 8.942, 0.0), (1.696, 8.942, 0.0)],d=1)


# Cog Wheel
def cogWheelShape():
	"""Creates Cog Wheel Shape"""
	return mc.curve(p=[(5.034, 0.0, -0.0), (5.032, 0.0, -0.17), (5.026, 0.0, -0.396), (5.005, 0.0, -0.617), (4.95, 0.0, -0.914), (4.874, 0.0, -0.929), (4.344, 0.0, -1.036), (4.269, 0.0, -1.051), (4.162, 0.0, -1.485), (3.992, 0.0, -1.894), (3.767, 0.0, -2.267), (3.81, 0.0, -2.331), (4.111, 0.0, -2.778), (4.154, 0.0, -2.842), (3.982, 0.0, -3.095), (3.784, 0.0, -3.336), (3.56, 0.0, -3.561), (3.339, 0.0, -3.782), (3.102, 0.0, -3.976), (2.853, 0.0, -4.147), (2.789, 0.0, -4.104), (2.339, 0.0, -3.805), (2.275, 0.0, -3.763), (1.903, 0.0, -3.988), (1.494, 0.0, -4.16), (1.061, 0.0, -4.267), (1.046, 0.0, -4.343), (0.942, 0.0, -4.872), (0.927, 0.0, -4.948), (0.626, 0.0, -5.005), (0.316, 0.0, -5.036), (-0.001, 0.0, -5.036), (-0.314, 0.0, -5.036), (-0.619, 0.0, -5.006), (-0.915, 0.0, -4.951), (-0.93, 0.0, -4.875), (-1.037, 0.0, -4.345), (-1.052, 0.0, -4.27), (-1.486, 0.0, -4.163), (-1.895, 0.0, -3.993), (-2.268, 0.0, -3.768), (-2.332, 0.0, -3.811), (-2.78, 0.0, -4.112), (-2.843, 0.0, -4.155), (-3.096, 0.0, -3.983), (-3.338, 0.0, -3.785), (-3.562, 0.0, -3.561), (-3.783, 0.0, -3.34), (-3.977, 0.0, -3.103), (-4.148, 0.0, -2.855), (-4.105, 0.0, -2.79), (-3.806, 0.0, -2.341), (-3.764, 0.0, -2.276), (-3.989, 0.0, -1.904), (-4.161, 0.0, -1.496), (-4.268, 0.0, -1.062), (-4.344, 0.0, -1.047), (-4.874, 0.0, -0.943), (-4.949, 0.0, -0.928), (-5.006, 0.0, -0.628), (-5.036, 0.0, -0.324), (-5.037, 0.0, -0.074), (-5.037, 0.0, -0.0), (-5.035, 0.0, 0.17), (-5.029, 0.0, 0.396), (-5.007, 0.0, 0.617), (-4.952, 0.0, 0.914), (-4.876, 0.0, 0.929), (-4.347, 0.0, 1.036), (-4.271, 0.0, 1.051), (-4.164, 0.0, 1.485), (-3.994, 0.0, 1.894), (-3.769, 0.0, 2.267), (-3.812, 0.0, 2.331), (-4.113, 0.0, 2.778), (-4.157, 0.0, 2.842), (-3.984, 0.0, 3.095), (-3.786, 0.0, 3.336), (-3.562, 0.0, 3.561), (-3.341, 0.0, 3.782), (-3.104, 0.0, 3.976), (-2.856, 0.0, 4.147), (-2.791, 0.0, 4.104), (-2.342, 0.0, 3.805), (-2.278, 0.0, 3.763), (-1.905, 0.0, 3.988), (-1.497, 0.0, 4.16), (-1.063, 0.0, 4.267), (-1.048, 0.0, 4.343), (-0.944, 0.0, 4.872), (-0.93, 0.0, 4.948), (-0.629, 0.0, 5.005), (-0.319, 0.0, 5.036), (-0.001, 0.0, 5.036), (0.311, 0.0, 5.036), (0.616, 0.0, 5.006), (0.913, 0.0, 4.951), (0.928, 0.0, 4.875), (1.035, 0.0, 4.345), (1.05, 0.0, 4.27), (1.484, 0.0, 4.163), (1.893, 0.0, 3.993), (2.266, 0.0, 3.768), (2.33, 0.0, 3.811), (2.777, 0.0, 4.112), (2.841, 0.0, 4.155), (3.094, 0.0, 3.983), (3.335, 0.0, 3.785), (3.56, 0.0, 3.561), (3.781, 0.0, 3.34), (3.975, 0.0, 3.103), (4.146, 0.0, 2.855), (4.103, 0.0, 2.79), (3.804, 0.0, 2.341), (3.761, 0.0, 2.276), (3.987, 0.0, 1.904), (4.158, 0.0, 1.496), (4.266, 0.0, 1.062), (4.342, 0.0, 1.047), (4.871, 0.0, 0.943), (4.947, 0.0, 0.928), (5.004, 0.0, 0.628), (5.034, 0.0, 0.324), (5.035, 0.0, 0.074), (5.035, 0.0, -0.0)],d=3)


# Square
def squareShape():
	"""Creates Square Shape"""
	return mc.curve(p=[(-10.262, 25.149, 0.0), (-10.262, 3.94, 0.0), (10.947, 3.94, 0.0), (10.947, 25.149, 0.0), (-10.262, 25.149, 0.0)],d=1)

	
#Triangle
def triangleShape():
	"""Creates Triangle Shape"""
	return mc.curve(p=[(8.0, 0.0, 8.0), (0.0, 0.0, -8.0), (-8.0, 0.0, 8.0), (8.0, 0.0, 8.0)],d=1)

	
#R hand
def handShape():
	"""Creates Hand Shape"""
	return mc.curve(p=[[-9.41, -0.0, 17.581], [-9.466, -0.0, 7.084], [-9.523, -0.0, -3.417], [-9.579, -0.0, -13.915], [-13.587, -0.0, -13.915], [-17.595, -0.0, -13.915], [-21.602, -0.0, -13.915], [-27.461, -0.0, -26.048], [-54.712, -0.0, -22.888], [-72.91, -0.0, -22.889], [-79.322, -0.0, -22.89], [-93.024, 0.0, -23.557], [-93.23, 0.0, -19.333], [-93.358, 0.0, -13.496], [-76.117, 0.0, -14.761], [-69.862, -0.0, -14.761], [-67.798, -0.0, -14.762], [-63.67, -0.0, -15.331], [-62.75, -0.0, -14.084], [-62.75, -0.0, -13.745], [-62.75, -0.0, -13.407], [-62.75, -0.0, -13.068], [-64.993, -0.0, -12.306], [-68.901, -0.0, -12.729], [-71.725, -0.0, -12.729], [-78.949, 0.0, -12.729], [-93.351, 0.0, -12.729], [-93.399, 0.0, -12.729], [-93.435, 0.0, -12.732], [-104.039, 0.0, -13.412], [-103.39, 0.0, -8.327], [-103.194, 0.0, -6.792], [-102.019, 0.0, -4.939], [-99.495, 0.0, -4.771], [-89.901, 0.0, -4.714], [-81.658, 0.0, -4.658], [-72.063, 0.0, -4.601], [-69.707, 0.0, -4.602], [-63.809, -0.0, -5.371], [-62.75, -0.0, -3.924], [-62.75, -0.0, -3.698], [-62.75, -0.0, -3.472], [-62.75, -0.0, -3.247], [-62.986, 0.0, -2.921], [-62.767, -0.0, -3.145], [-63.089, 0.0, -2.908], [-64.988, 0.0, -1.8], [-70.117, 0.0, -2.569], [-72.741, 0.0, -2.569], [-81.037, 0.0, -2.626], [-89.336, 0.0, -2.682], [-97.633, 0.0, -2.739], [-102.857, 0.0, -2.825], [-108.641, 0.0, -3.552], [-109.486, 0.0, 0.817], [-110.59, 0.0, 6.524], [-103.286, 0.0, 5.559], [-98.479, 0.0, 5.559], [-86.627, 0.0, 5.615], [-74.772, 0.0, 5.672], [-62.919, 0.0, 5.728], [-62.806, 0.0, 5.954], [-62.694, 0.0, 6.18], [-62.581, 0.0, 6.405], [-62.75, 0.0, 6.744], [-62.919, 0.0, 7.083], [-63.089, 0.0, 7.421], [-73.248, 0.0, 7.421], [-83.41, 0.0, 7.421], [-93.569, 0.0, 7.421], [-98.186, 0.0, 7.421], [-103.84, 0.0, 6.95], [-103.39, 0.0, 11.824], [-102.956, 0.0, 16.528], [-97.817, 0.0, 15.719], [-92.722, 0.0, 15.719], [-82.789, 0.0, 15.775], [-72.853, 0.0, 15.832], [-62.919, 0.0, 15.888], [-62.863, 0.0, 16.057], [-62.806, 0.0, 16.227], [-62.75, 0.0, 16.396], [-62.753, 0.0, 16.914], [-62.787, 0.0, 17.049], [-63.089, 0.0, 17.581], [-73.233, 0.0, 17.398], [-81.118, 0.0, 16.708], [-81.885, 0.0, 26.048], [-67.267, 0.0, 26.048], [-52.645, 0.0, 26.048], [-38.027, 0.0, 26.048], [-28.802, -0.0, 23.67], [-27.917, -0.0, 22.505], [-21.771, -0.0, 17.581], [-17.651, -0.0, 17.581], [-13.53, -0.0, 17.581], [-9.41, -0.0, 17.581]],d=3)


































