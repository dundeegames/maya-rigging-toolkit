"""Module for creating Control Curve Shapes
@file JKTCurves.py
@details    creates UI for my tool

@author     Jiri Klic
@version    1.0
@date       December 2015
@pre        
@post       
@bug        No known bugs
@warning    
@todo       

@copyright  University of Abertay - Dundee.2013.
			Intellectual Property Policy.[online].Available from: 
			http://www.abertay.ac.uk/media/Intellectual-Property-Policy-v2-01.pdf
			[Accessed 22 April 2015].
"""

import maya.cmds as mc

# Base curve
def baseShape(shapeName):
	"""Creates Base Shape around the origin
	"""
	return mc.curve(name=shapeName, p=[(0.0, 0.0, -72.6), (24.75, 0.0, -47.85), (11.55, 0.0, -47.85), (11.55, 0.0, -44.55), (17.82, 0.0, -42.9), (23.1, 0.0, -40.425), (28.38, 0.0, -37.125), (33.0, 0.0, -33.0), (37.125, 0.0, -28.38), (40.425, 0.0, -23.1), (42.9, 0.0, -17.82), (44.55, 0.0, -11.55), (47.85, 0.0, -11.55), (47.85, 0.0, -24.75), (72.6, 0.0, 0.0), (47.85, 0.0, 24.75), (47.85, 0.0, 11.55), (44.55, 0.0, 11.55), (42.9, 0.0, 17.82), (40.425, 0.0, 23.1), (37.125, 0.0, 28.38), (33.0, 0.0, 33.0), (28.38, 0.0, 37.125), (23.1, 0.0, 40.425), (17.82, 0.0, 42.9), (11.55, 0.0, 44.55), (11.55, 0.0, 47.85), (24.75, 0.0, 47.85), (0.0, 0.0, 72.6), (-24.75, 0.0, 47.85), (-11.55, 0.0, 47.85), (-11.55, 0.0, 44.55), (-17.82, 0.0, 42.9), (-23.1, 0.0, 40.425), (-28.38, 0.0, 37.125), (-33.0, 0.0, 33.0), (-37.125, 0.0, 28.38), (-40.425, 0.0, 23.1), (-42.9, 0.0, 17.82), (-44.55, 0.0, 11.55), (-47.85, 0.0, 11.55), (-47.85, 0.0, 24.75), (-72.6, 0.0, 0.0), (-47.85, 0.0, -24.75), (-47.85, 0.0, -11.55), (-44.55, 0.0, -11.55), (-42.9, 0.0, -17.82), (-40.425, 0.0, -23.1), (-37.125, 0.0, -28.38), (-33.0, 0.0, -33.0), (-28.38, 0.0, -37.125), (-23.1, 0.0, -40.425), (-17.82, 0.0, -42.9), (-11.55, 0.0, -44.55), (-11.55, 0.0, -47.85), (-24.75, 0.0, -47.85), (0.0, 0.0, -72.6)],d=1)

# Circle
def circleShape(shapeName):
	"""Creates Circle Shape
	"""
	#return mc.curve(name=shapeName, p=[(0.0, 13.517, -13.023), (0.0, 21.602, -1.399), (0.0, 15.142, 14.34), (0.0, 0.103, 20.656), (0.0, -17.57, 13.085), (0.0, -19.442, -6.933), (0.0, -10.678, -16.479), (0.0, 3.127, -21.026), (0.0, 13.517, -13.023)],d=3)
	return mc.curve(name=shapeName, p=[(0.0, 12.838, 12.437), (0.0, 1.214, 20.522), (0.0, -14.525, 14.062), (0.0, -20.841, -0.977), (0.0, -13.27, -18.65), (0.0, 6.748, -20.522), (0.0, 16.294, -11.758), (0.0, 20.841, 2.047), (0.003, 12.838, 12.437)],d=3)
	#return mc.circle( name=shapeName, nr=(1, 0, 0), c=(0, 0, 0), r=18.97 )

# Cube
def cubeShape(shapeName):
	"""Creates Cube Shape
	"""
	return mc.curve(name=shapeName, p=[[-1.0, -1.0, -1.0], [1.0, -1.0, -1.0], [1.0, -1.0, 1.0], [-1.0, -1.0, 1.0], [-1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, -1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, -1.0], [1.0, -1.0, -1.0], [1.0, 1.0, -1.0], [-1.0, 1.0, -1.0], [-1.0, -1.0, -1.0], [-1.0, 1.0, -1.0], [-1.0, 1.0, 1.0], [-1.0, -1.0, 1.0], [-1.0, -1.0, -1.0]],d=1)


# # L Foot
# l_foot = mc.curve(p=[[17.025, 6.588, -7.33], [11.335, 8.823, -6.756], [6.544, 7.096, -7.2], [4.733, 3.301, -7.15], [4.772, 0.001, -2.573], [6.581, 0.001, 4.297], [3.872, 0.001, 14.404], [11.121, 0.001, 13.98], [18.885, 0.001, 14.404], [20.769, 0.001, 10.891], [18.458, 0.001, -3.427], [19.212, 4.287, -8.334]],d=3)
# mc.closeCurve( l_foot, ps=0, rpo=True )


# # L Toe
# l_toe = mc.curve(p=[(4.822, 0.0, 13.873), (11.51, 0.0, 14.763), (19.782, 0.0, 13.873), (20.582, 0.0, 17.876), (17.328, 0.0, 23.695), (11.51, 0.0, 26.105), (6.46, 0.0, 23.695), (5.161, 0.0, 17.876)],d=3)
# mc.closeCurve( l_toe, ps=0, rpo=True )


# L footprint
def footShapeL(shapeName):
	"""Creates Left Foot Shape
	"""
	return mc.curve(name=shapeName, p=[(6.363, 5.354, 7.31), (3.391, 2.853, 7.389), (1.733, 1.458, 4.955), (-0.53, -0.446, 4.536), (-1.582, -1.331, 4.341), (-4.116, -3.463, 4.365), (-5.55, -4.669, 4.981), (-10.163, -8.55, 6.963), (-10.641, -8.953, 5.991), (-10.925, -9.192, 5.765), (-11.999, -10.095, 4.778), (-13.061, -10.989, 2.883), (-12.542, -10.552, 0.132), (-11.997, -10.094, -2.753), (-9.971, -8.389, -3.57), (-8.06, -6.781, -4.421), (-6.796, -5.718, -4.984), (-5.447, -4.583, -5.33), (-4.089, -3.44, -5.776), (-2.649, -2.229, -6.236), (4.277, 3.599, -7.389), (5.952, 5.008, -7.131), (7.124, 5.994, -6.92), (8.828, 7.428, -6.368), (9.966, 8.385, -5.374), (13.061, 10.989, -2.666), (12.691, 10.677, 2.76), (10.434, 8.779, 5.298), (8.729, 7.344, 7.216), (6.613, 5.564, 7.284), (6.363, 5.354, 7.31)],d=3)
	#return mc.curve(name=shapeName, p=[(-7.31, 0.0, 15.172), (-7.389, 0.0, 11.288), (-4.955, 0.0, 9.121), (-4.536, 0.0, 6.164), (-4.341, 0.0, 4.788), (-4.365, 0.0, 1.477), (-4.981, 0.0, -0.397), (-6.963, 0.0, -6.425), (-5.991, 0.0, -7.05), (-5.765, 0.0, -7.421), (-4.778, 0.0, -8.825), (-2.883, 0.0, -10.213), (-0.132, 0.0, -9.534), (2.753, 0.0, -8.823), (3.57, 0.0, -6.175), (4.421, 0.0, -3.677), (4.984, 0.0, -2.026), (5.33, 0.0, -0.263), (5.776, 0.0, 1.512), (6.236, 0.0, 3.394), (7.389, 0.0, 12.446), (7.131, 0.0, 14.635), (6.92, 0.0, 16.166), (6.368, 0.0, 18.393), (5.374, 0.0, 19.88), (2.666, 0.0, 23.925), (-2.76, 0.0, 23.441), (-5.298, 0.0, 20.492), (-7.216, 0.0, 18.263), (-7.284, 0.0, 15.498), (-7.31, 0.0, 15.172)],d=3)
	#return mc.curve(name=shapeName, p=[(8.316, 0.0, 7.31), (4.432, 0.0, 7.389), (2.265, 0.0, 4.955), (-0.692, 0.0, 4.536), (-2.068, 0.0, 4.341), (-5.379, 0.0, 4.365), (-7.253, 0.0, 4.981), (-13.281, 0.0, 6.963), (-13.906, 0.0, 5.991), (-14.277, 0.0, 5.765), (-15.681, 0.0, 4.778), (-17.069, 0.0, 2.883), (-16.39, 0.0, 0.132), (-15.679, 0.0, -2.753), (-13.031, 0.0, -3.57), (-10.533, 0.0, -4.421), (-8.882, 0.0, -4.984), (-7.119, 0.0, -5.33), (-5.344, 0.0, -5.776), (-3.462, 0.0, -6.236), (5.59, 0.0, -7.389), (7.779, 0.0, -7.131), (9.31, 0.0, -6.92), (11.537, 0.0, -6.368), (13.024, 0.0, -5.374), (17.069, 0.0, -2.666), (16.585, 0.0, 2.76), (13.636, 0.0, 5.298), (11.407, 0.0, 7.216), (8.642, 0.0, 7.284), (8.316, 0.0, 7.31)],d=3)

	
# R footprint
def footShapeR(shapeName):
	"""Creates Right Foot Shape
	"""
	return mc.curve(name=shapeName, p=[(-6.37, -5.327, -7.324), (-3.413, -2.808, -7.396), (-1.75, -1.425, -4.959), (0.504, 0.489, -4.535), (1.551, 1.379, -4.337), (4.072, 3.526, -4.356), (5.495, 4.747, -4.968), (10.074, 8.673, -6.94), (10.556, 9.069, -5.967), (10.84, 9.308, -5.74), (11.913, 10.209, -4.751), (12.98, 11.092, -2.854), (12.478, 10.628, -0.104), (11.951, 10.141, 2.78), (9.939, 8.417, 3.592), (8.042, 6.791, 4.439), (6.788, 5.714, 4.999), (5.448, 4.568, 5.342), (4.098, 3.414, 5.785), (2.669, 2.19, 6.242), (-4.217, -3.689, 7.379), (-5.885, -5.106, 7.117), (-7.052, -6.097, 6.904), (-8.75, -7.536, 6.348), (-9.887, -8.492, 5.351), (-12.981, -11.09, 2.637), (-12.641, -10.729, -2.788), (-10.409, -8.794, -5.321), (-8.723, -7.333, -7.235), (-6.618, -5.539, -7.298), (-6.37, -5.327, -7.324)],d=3)

	
# L Eye
def eyeShapeL(shapeName):
	"""Creates Left Eye Shape
	"""
	return mc.curve(name=shapeName, p=[(1.719, 0.773, -0.0), (1.727, 0.717, -0.0), (1.733, 0.661, -0.0), (1.733, 0.603, -0.0), (1.733, -0.011, 0.0), (1.235, -0.508, 0.0), (0.621, -0.508, 0.0), (0.007, -0.508, 0.0), (-0.491, -0.011, -0.0), (-0.491, 0.603, -0.0), (-0.491, 0.835, -0.0), (-0.42, 1.05, -0.0), (-0.298, 1.228, -0.0), (-1.222, 1.04, -0.0), (-2.514, 0.018, -0.0), (-2.518, 0.015, -0.0), (-2.06, -0.574, -0.0), (-1.079, -1.228, 0.0), (-0.36, -1.228, 0.0), (1.21, -1.228, 0.0), (2.06, -0.705, 0.0), (2.518, 0.146, 0.0), (2.341, 0.373, 0.0), (2.055, 0.591, -0.0), (1.719, 0.773, -0.0)],d=3)


# R Eye
def eyeShapeR(shapeName):
	"""Creates Right Eye Shape
	"""
	return mc.curve(name=shapeName, p=[(-1.719, 0.773, -0.0), (-1.727, 0.717, -0.0), (-1.733, 0.661, -0.0), (-1.733, 0.603, -0.0), (-1.733, -0.011, -0.0), (-1.235, -0.508, 0.0), (-0.621, -0.508, 0.0), (-0.007, -0.508, 0.0), (0.491, -0.011, 0.0), (0.491, 0.603, -0.0), (0.491, 0.835, -0.0), (0.42, 1.05, -0.0), (0.298, 1.228, -0.0), (1.222, 1.04, -0.0), (2.514, 0.018, 0.0), (2.518, 0.015, 0.0), (2.06, -0.574, 0.0), (1.079, -1.228, 0.0), (0.36, -1.228, 0.0), (-1.21, -1.228, 0.0), (-2.06, -0.705, 0.0), (-2.518, 0.146, -0.0), (-2.341, 0.373, -0.0), (-2.055, 0.591, -0.0), (-1.719, 0.773, -0.0)],d=3)


# Sight
def sightShape(shapeName):
	"""Creates Parent Shape for Left and Right Eye Shape
	"""
	return mc.curve(name=shapeName, p=[(9.064, -0.0, 0.0), (9.064, -1.917, 0.0), (5.006, -3.471, 0.0), (-0.0, -3.471, 0.0), (-5.006, -3.471, 0.0), (-9.064, -1.917, -0.0), (-9.064, -0.0, -0.0), (-9.064, 1.917, -0.0), (-5.006, 3.471, -0.0), (-0.0, 3.471, -0.0), (5.006, 3.471, -0.0), (9.064, 1.917, 0.0), (9.064, -0.0, 0.0)],d=3)


# 4-way flat arrow
def flatArrow4(shapeName):
	"""Creates 4-way flat arrow Shape
	"""
	return mc.curve(name=shapeName, p=[(0.0, -4.95, -0.0), (1.98, -2.97, -0.0), (0.99, -2.97, -0.0), (0.99, -1.98, -0.0), (1.98, -0.99, -0.0), (2.97, -0.99, -0.0), (2.97, -1.98, -0.0), (4.95, 0.0, 0.0), (2.97, 1.98, 0.0), (2.97, 0.99, 0.0), (1.98, 0.99, 0.0), (0.99, 1.98, 0.0), (0.99, 2.97, 0.0), (1.98, 2.97, 0.0), (0.0, 4.95, 0.0), (-1.98, 2.97, 0.0), (-0.99, 2.97, 0.0), (-0.99, 1.98, 0.0), (-1.98, 0.99, 0.0), (-2.97, 0.99, 0.0), (-2.97, 1.98, 0.0), (-4.95, 0.0, 0.0), (-2.97, -1.98, -0.0), (-2.97, -0.99, -0.0), (-1.98, -0.99, -0.0), (-0.99, -1.98, -0.0), (-0.99, -2.97, -0.0), (-1.98, -2.97, -0.0), (0.0, -4.95, -0.0)],d=1)


# 4-way bend arrow
def bendArrow4(shapeName):
	"""Creates 4-way bend arrow Shape
	"""
	#return mc.curve(name=shapeName, p=[(-42.355, -2.785, -6.806), (-42.355, -2.785, -6.806), (-42.355, -2.785, -6.806), (-42.355, -2.785, -6.806), (-41.625, -4.685, -5.553), (-40.783, -6.135, -4.281), (-39.818, -7.158, -2.971), (-39.769, -7.296, -3.43), (-39.72, -7.434, -3.888), (-39.672, -7.572, -4.347), (-38.011, -9.796, -4.002), (-36.204, -11.352, -3.656), (-34.171, -12.218, -3.297), (-34.435, -11.723, -1.13), (-34.536, -10.524, 0.958), (-34.498, -8.657, 3.039), (-34.921, -8.44, 2.963), (-35.344, -8.223, 2.888), (-35.767, -8.007, 2.812), (-34.753, -7.398, 4.327), (-33.672, -6.352, 5.799), (-32.51, -4.849, 7.248), (-31.635, -6.779, 6.144), (-30.645, -8.259, 5.022), (-29.528, -9.314, 3.868), (-30.002, -9.343, 3.792), (-30.477, -9.371, 3.716), (-30.951, -9.4, 3.64), (-30.99, -11.267, 1.558), (-30.888, -12.466, -0.529), (-30.625, -12.961, -2.697), (-28.415, -12.985, -2.338), (-26.136, -12.284, -1.992), (-23.722, -10.915, -1.647), (-23.771, -10.777, -1.188), (-23.819, -10.639, -0.73), (-23.868, -10.5, -0.271), (-22.22, -10.025, -1.139), (-20.523, -9.107, -1.982), (-18.755, -7.732, -2.811), (-20.186, -9.178, -4.063), (-21.54, -10.168, -5.336), (-22.835, -10.717, -6.646), (-22.935, -10.824, -6.187), (-23.035, -10.931, -5.729), (-23.135, -11.038, -5.27), (-25.549, -12.408, -5.615), (-27.828, -13.108, -5.961), (-30.037, -13.084, -6.32), (-29.598, -12.737, -8.487), (-29.023, -11.679, -10.575), (-28.309, -9.954, -12.656), (-27.834, -9.925, -12.58), (-27.36, -9.897, -12.504), (-26.886, -9.868, -12.428), (-27.57, -8.904, -13.944), (-28.139, -7.511, -15.416), (-28.6, -5.668, -16.865), (-30.177, -7.084, -15.761), (-31.678, -8.043, -14.639), (-33.124, -8.56, -13.484), (-32.701, -8.777, -13.408), (-32.278, -8.994, -13.333), (-31.855, -9.211, -13.257), (-32.569, -10.936, -11.175), (-33.144, -11.993, -9.088), (-33.584, -12.341, -6.92), (-35.617, -11.475, -7.28), (-37.423, -9.919, -7.625), (-39.084, -7.695, -7.97), (-38.984, -7.588, -8.429), (-38.884, -7.481, -8.887), (-38.784, -7.374, -9.345), (-40.102, -6.277, -8.478), (-41.288, -4.755, -7.635), (-42.355, -2.785, -6.806)],d=3)
	#return mc.curve(name=shapeName, p=[(7.373, 12.346, 0.044), (7.373, 12.346, 0.044), (7.373, 12.346, 0.044), (7.373, 12.346, 0.044), (5.683, 11.027, 1.102), (4.458, 9.694, 2.175), (3.675, 8.329, 3.279), (3.55, 8.327, 2.814), (3.424, 8.326, 2.35), (3.298, 8.325, 1.885), (1.492, 6.189, 1.886), (0.37, 4.056, 1.887), (-0.029, 1.854, 1.886), (0.404, 1.859, 4.082), (1.561, 1.873, 6.196), (3.399, 1.898, 8.303), (3.518, 2.365, 8.303), (3.637, 2.831, 8.304), (3.755, 3.298, 8.304), (4.577, 2.205, 9.654), (5.84, 1.149, 10.966), (7.566, 0.118, 12.256), (5.87, -0.961, 10.965), (4.637, -2.049, 9.651), (3.847, -3.163, 8.299), (3.715, -2.701, 8.299), (3.584, -2.237, 8.3), (3.452, -1.775, 8.3), (1.613, -1.799, 6.193), (0.457, -1.814, 4.08), (0.023, -1.818, 1.883), (0.484, -4.009, 1.88), (1.667, -6.108, 1.877), (3.532, -8.192, 1.873), (3.658, -8.19, 2.338), (3.784, -8.19, 2.802), (3.911, -8.188, 3.267), (4.731, -9.529, 2.16), (5.994, -10.825, 1.085), (7.719, -12.093, 0.027), (5.99, -10.823, -1.024), (4.723, -9.525, -2.094), (3.899, -8.183, -3.195), (3.775, -8.185, -2.729), (3.65, -8.187, -2.265), (3.526, -8.189, -1.8), (1.66, -6.105, -1.795), (0.478, -4.006, -1.792), (0.017, -1.816, -1.79), (0.443, -1.808, -3.987), (1.592, -1.79, -6.105), (3.424, -1.763, -8.218), (3.556, -2.226, -8.218), (3.687, -2.689, -8.219), (3.819, -3.151, -8.219), (4.604, -2.036, -9.573), (5.834, -0.945, -10.889), (7.526, 0.135, -12.185), (5.804, 1.165, -10.888), (4.544, 2.218, -9.57), (3.728, 3.309, -8.214), (3.609, 2.842, -8.214), (3.49, 2.376, -8.216), (3.371, 1.909, -8.216), (1.54, 1.882, -6.102), (0.391, 1.864, -3.985), (-0.036, 1.857, -1.787), (0.364, 4.06, -1.787), (1.486, 6.191, -1.786), (3.292, 8.327, -1.788), (3.416, 8.329, -2.253), (3.541, 8.331, -2.718), (3.665, 8.333, -3.182), (4.451, 9.697, -2.08), (5.681, 11.029, -1.008), (7.373, 12.346, 0.044)],d=3)
	return mc.curve(name=shapeName, p=[(3.531, 12.22, 0.044), (3.531, 12.22, 0.044), (3.531, 12.22, 0.044), (3.531, 12.22, 0.044), (1.841, 10.9, 1.102), (0.616, 9.568, 2.175), (-0.167, 8.203, 3.279), (-0.292, 8.2, 2.814), (-0.418, 8.2, 2.35), (-0.544, 8.198, 1.885), (-2.35, 6.062, 1.886), (-3.472, 3.929, 1.887), (-3.871, 1.728, 1.886), (-3.438, 1.732, 4.082), (-2.281, 1.746, 6.196), (-0.443, 1.771, 8.303), (-0.324, 2.239, 8.303), (-0.205, 2.704, 8.304), (-0.087, 3.171, 8.304), (0.735, 2.079, 9.654), (1.998, 1.022, 10.966), (3.724, -0.009, 12.256), (2.028, -1.087, 10.965), (0.795, -2.175, 9.651), (0.005, -3.289, 8.299), (-0.127, -2.828, 8.299), (-0.258, -2.364, 8.3), (-0.39, -1.901, 8.3), (-2.229, -1.925, 6.193), (-3.385, -1.941, 4.08), (-3.819, -1.945, 1.883), (-3.358, -4.136, 1.88), (-2.175, -6.234, 1.877), (-0.31, -8.319, 1.873), (-0.184, -8.316, 2.338), (-0.058, -8.316, 2.802), (0.069, -8.315, 3.267), (0.889, -9.655, 2.16), (2.152, -10.951, 1.085), (3.877, -12.22, 0.027), (2.148, -10.95, -1.024), (0.881, -9.652, -2.094), (0.057, -8.309, -3.195), (-0.067, -8.312, -2.729), (-0.192, -8.313, -2.265), (-0.316, -8.316, -1.8), (-2.182, -6.232, -1.795), (-3.364, -4.133, -1.792), (-3.825, -1.943, -1.79), (-3.399, -1.935, -3.987), (-2.25, -1.917, -6.105), (-0.418, -1.889, -8.218), (-0.286, -2.353, -8.218), (-0.155, -2.816, -8.219), (-0.023, -3.277, -8.219), (0.762, -2.163, -9.573), (1.992, -1.071, -10.889), (3.684, 0.008, -12.185), (1.962, 1.038, -10.888), (0.702, 2.091, -9.57), (-0.114, 3.183, -8.214), (-0.233, 2.716, -8.214), (-0.352, 2.249, -8.216), (-0.471, 1.782, -8.216), (-2.302, 1.755, -6.102), (-3.451, 1.738, -3.985), (-3.878, 1.73, -1.787), (-3.478, 3.933, -1.787), (-2.356, 6.064, -1.786), (-0.55, 8.2, -1.788), (-0.426, 8.203, -2.253), (-0.301, 8.204, -2.718), (-0.177, 8.207, -3.182), (0.609, 9.57, -2.08), (1.839, 10.902, -1.008), (3.531, 12.22, 0.044)],d=3)

	
# Chest
def chestShape(shapeName):
	"""Creates Chest Shape
	"""
	#return mc.curve(name=shapeName, p=[(-14.274, -9.897, -10.278), (14.274, -9.897, -10.278), (14.274, -12.373, 12.695), (-14.274, -12.373, 12.695), (-13.439, 10.857, 5.431), (13.439, 10.857, 5.431), (14.274, -12.373, 12.695), (13.439, 10.857, 5.431), (14.894, 12.373, -12.695), (14.274, -9.897, -10.278), (14.894, 12.373, -12.695), (-14.894, 12.373, -12.695), (-14.274, -9.897, -10.278), (-14.894, 12.373, -12.695), (-13.439, 10.857, 5.431), (-14.274, -12.373, 12.695), (-14.274, -9.897, -10.278)],d=1)
	return mc.curve(name=shapeName, p=[(-6.48, -11.196, -14.382), (-6.569, -11.395, 14.165), (-14.765, 10.208, 14.29), (-14.677, 10.407, -14.257), (9.632, 9.237, -13.355), (9.549, 9.05, 13.523), (-14.765, 10.208, 14.29), (9.549, 9.05, 13.523), (15.588, -8.116, 14.877), (-6.569, -11.395, 14.165), (15.588, -8.116, 14.877), (15.68, -7.908, -14.91), (-6.48, -11.196, -14.382), (15.68, -7.908, -14.91), (9.632, 9.237, -13.355), (-14.677, 10.407, -14.257), (-6.48, -11.196, -14.382)],d=1)


# Hips
def hipShape(shapeName):
	"""Creates Hip Shape
	"""
	#return mc.curve(name=shapeName, p=[(-18.129, -9.13, -13.83), (18.129, -9.13, -13.83), (18.129, -9.13, 13.83), (-18.129, -9.13, 13.83), (-16.473, 9.13, 12.967), (16.473, 9.13, 12.967), (18.129, -9.13, 13.83), (16.473, 9.13, 12.967), (16.473, 9.13, -12.545), (18.129, -9.13, -13.83), (16.473, 9.13, -12.545), (-16.473, 9.13, -12.545), (-18.129, -9.13, -13.83), (-16.473, 9.13, -12.545), (-16.473, 9.13, 12.967), (-18.129, -9.13, 13.83), (-18.129, -9.13, -13.83)],d=1)
	return mc.curve(name=shapeName, p=[(-12.272, -11.136, -18.129), (-12.272, -11.136, 18.129), (-5.418, 15.661, 18.129), (-5.418, 15.661, -18.129), (12.058, 10.3, -16.473), (12.058, 10.3, 16.473), (-5.418, 15.661, 18.129), (12.058, 10.3, 16.473), (5.737, -14.416, 16.473), (-12.272, -11.136, 18.129), (5.737, -14.416, 16.473), (5.737, -14.416, -16.473), (-12.272, -11.136, -18.129), (5.737, -14.416, -16.473), (12.058, 10.3, -16.473), (-5.418, 15.661, -18.129), (-12.272, -11.136, -18.129)],d=1)

# Neck
def neckShape(shapeName):
	"""Creates Neck Shape
	"""
	#return mc.curve(name=shapeName, p=[(5.066, 7.51, 7.695), (5.097, 0.308, 12.697), (3.188, -8.854, 8.7), (1.53, -10.795, -0.604), (4.105, -6.629, -11.099), (5.722, 3.544, -11.146), (4.993, 8.539, -7.275), (4.246, 11.365, 1.267), (5.068, 7.51, 7.695)],d=3)
	return mc.curve(name=shapeName, p=[(1.44, 7.225, 6.92), (1.471, 0.023, 11.921), (-0.438, -9.139, 7.925), (-2.096, -11.08, -1.379), (0.479, -6.914, -11.874), (2.096, 3.259, -11.921), (1.367, 8.254, -8.05), (0.62, 11.08, 0.492), (1.442, 7.225, 6.92)],d=3)

	# neckCurve = mc.curve(name=shapeName, p=[(7.758, 3.084, -6.415), (-0.0, 2.02, -9.485), (-7.758, 3.084, -6.415), (-10.971, 2.57, 0.453), (-7.758, 0.704, 7.083), (-0.0, -1.346, 9.603), (7.758, 0.704, 7.083), (10.971, 2.57, 0.453)],d=3)
	# mc.closeCurve( neckCurve, ps=0, rpo=True )
	# return neckCurve


# Head
def headShape(shapeName):
	"""Creates Head Shape
	"""
	#return mc.curve(name=shapeName, p=[(12.356, 8.4, 8.148), (11.985, 0.794, 13.444), (11.483, -9.504, 9.212), (11.109, -11.983, -0.64), (11.523, -8.683, -10.31), (12.162, 4.415, -12.311), (12.467, 10.662, -6.57), (12.654, 13.231, 1.341), (12.358, 8.4, 8.148)],d=3)
	return mc.curve(name=shapeName, p=[(1.274, -7.47, 7.686), (0.12, -12.766, 0.158), (-1.441, -8.534, -10.033), (-2.069, 1.318, -12.46), (-1.317, 10.988, -9.22), (0.67, 12.989, 3.742), (1.618, 7.248, 9.924), (2.069, -0.663, 12.46), (1.276, -7.47, 7.685)],d=3)

	
	
# Chin
def chinShape(shapeName):
	"""
	Creates Chin Shape"""
	return mc.curve(name=shapeName, p=[(1.351, 0.611, 1.605), (1.008, -1.414, 3.091), (-1.097, -1.789, 0.967), (-2.284, -1.664, -0.34), (-0.693, -1.759, -2.096), (1.196, -1.282, -3.091), (1.346, 1.067, -2.004), (2.284, 1.789, 0.206), (1.351, 0.611, 1.605)],d=3)


# Sphere
def sphereShape(shapeName):
	"""Creates Sphere Shape
	"""
	#return mc.curve(name=shapeName, p=[(2.014, 0.0, 0.0), (1.861, 0.001, -0.771), (1.424, 0.0, -1.424), (0.771, 0.0, -1.861), (0.0, 0.0, -2.014), (-0.771, 0.0, -1.861), (-1.424, 0.0, -1.424), (-1.861, -0.001, -0.771), (-2.014, 0.0, 0.0), (-1.861, 0.0, 0.771), (-1.424, -0.001, 1.425), (-0.771, -0.001, 1.861), (0.0, 0.0, 2.014), (0.771, -0.001, 1.861), (1.424, -0.001, 1.425), (1.861, -0.0, 0.771), (2.014, -0.0, 0.0), (1.861, 0.77, -0.0), (1.424, 1.424, 0.0), (0.771, 1.86, 0.0), (0.0, 2.015, 0.0), (-0.771, 1.86, 0.0), (-1.424, 1.424, 0.0), (-1.861, 0.77, -0.0), (-2.014, 0.0, 0.0), (-1.861, -0.771, 0.0), (-1.424, -1.425, 0.0), (-0.771, -1.861, 0.0), (0.0, -2.015, 0.0), (0.771, -1.861, 0.0), (1.424, -1.425, 0.0), (1.861, -0.771, 0.0), (2.014, 0.0, 0.0), (1.861, 0.77, 0.0), (1.424, 1.424, 0.0), (0.771, 1.86, 0.0), (0.0, 2.015, 0.0), (0.0, 1.424, 1.425), (0.0, 0.0, 2.014), (0.0, -1.424, 1.424), (0.0, -2.015, -0.0), (0.0, -1.425, -1.425), (0.0, 0.0, -2.014), (0.0, 1.424, -1.424), (0.0, 2.015, 0.0)],d=1)
	return mc.curve(name=shapeName, p=[(5.888, 0.0, 0.0), (5.441, 0.003, -2.254), (4.163, 0.0, -4.163), (2.254, 0.0, -5.441), (0.0, 0.0, -5.888), (-2.254, 0.0, -5.441), (-4.163, 0.0, -4.163), (-5.441, -0.003, -2.254), (-5.888, 0.0, 0.0), (-5.441, 0.0, 2.254), (-4.163, -0.003, 4.166), (-2.254, -0.003, 5.441), (0.0, 0.0, 5.888), (2.254, -0.003, 5.441), (4.163, -0.003, 4.166), (5.441, 0.0, 2.254), (5.888, 0.0, 0.0), (5.441, 2.251, 0.0), (4.163, 4.163, 0.0), (2.254, 5.438, 0.0), (0.0, 5.891, 0.0), (-2.254, 5.438, 0.0), (-4.163, 4.163, 0.0), (-5.441, 2.251, 0.0), (-5.888, 0.0, 0.0), (-5.441, -2.254, 0.0), (-4.163, -4.166, 0.0), (-2.254, -5.441, 0.0), (0.0, -5.891, 0.0), (2.254, -5.441, 0.0), (4.163, -4.166, 0.0), (5.441, -2.254, 0.0), (5.888, 0.0, 0.0), (5.441, 2.251, 0.0), (4.163, 4.163, 0.0), (2.254, 5.438, 0.0), (0.0, 5.891, 0.0), (0.0, 4.163, 4.166), (0.0, 0.0, 5.888), (0.0, -4.163, 4.163), (0.0, -5.891, 0.0), (0.0, -4.166, -4.166), (0.0, 0.0, -5.888), (0.0, 4.163, -4.163), (0.0, 5.891, 0.0)],d=1)
	

# Cross
def crossShape(shapeName):
	"""Creates Cross Shape
	"""
	return mc.curve(name=shapeName, p=[(1.696, 8.942, 0.0), (1.696, 6.661, 0.0), (3.978, 6.661, 0.0), (3.978, 3.046, 0.0), (1.696, 3.046, 0.0), (1.696, 0.764, 0.0), (-1.919, 0.764, 0.0), (-1.919, 3.046, 0.0), (-4.201, 3.046, 0.0), (-4.201, 6.661, 0.0), (-1.919, 6.661, 0.0), (-1.919, 8.942, 0.0), (1.696, 8.942, 0.0)],d=1)


# Cog Wheel
def cogWheelShape(shapeName):
	"""Creates Cog Wheel Shape
	"""
	#return mc.curve(name=shapeName, p=[(5.034, 0.0, -0.0), (5.032, 0.0, -0.17), (5.026, 0.0, -0.396), (5.005, 0.0, -0.617), (4.95, 0.0, -0.914), (4.874, 0.0, -0.929), (4.344, 0.0, -1.036), (4.269, 0.0, -1.051), (4.162, 0.0, -1.485), (3.992, 0.0, -1.894), (3.767, 0.0, -2.267), (3.81, 0.0, -2.331), (4.111, 0.0, -2.778), (4.154, 0.0, -2.842), (3.982, 0.0, -3.095), (3.784, 0.0, -3.336), (3.56, 0.0, -3.561), (3.339, 0.0, -3.782), (3.102, 0.0, -3.976), (2.853, 0.0, -4.147), (2.789, 0.0, -4.104), (2.339, 0.0, -3.805), (2.275, 0.0, -3.763), (1.903, 0.0, -3.988), (1.494, 0.0, -4.16), (1.061, 0.0, -4.267), (1.046, 0.0, -4.343), (0.942, 0.0, -4.872), (0.927, 0.0, -4.948), (0.626, 0.0, -5.005), (0.316, 0.0, -5.036), (-0.001, 0.0, -5.036), (-0.314, 0.0, -5.036), (-0.619, 0.0, -5.006), (-0.915, 0.0, -4.951), (-0.93, 0.0, -4.875), (-1.037, 0.0, -4.345), (-1.052, 0.0, -4.27), (-1.486, 0.0, -4.163), (-1.895, 0.0, -3.993), (-2.268, 0.0, -3.768), (-2.332, 0.0, -3.811), (-2.78, 0.0, -4.112), (-2.843, 0.0, -4.155), (-3.096, 0.0, -3.983), (-3.338, 0.0, -3.785), (-3.562, 0.0, -3.561), (-3.783, 0.0, -3.34), (-3.977, 0.0, -3.103), (-4.148, 0.0, -2.855), (-4.105, 0.0, -2.79), (-3.806, 0.0, -2.341), (-3.764, 0.0, -2.276), (-3.989, 0.0, -1.904), (-4.161, 0.0, -1.496), (-4.268, 0.0, -1.062), (-4.344, 0.0, -1.047), (-4.874, 0.0, -0.943), (-4.949, 0.0, -0.928), (-5.006, 0.0, -0.628), (-5.036, 0.0, -0.324), (-5.037, 0.0, -0.074), (-5.037, 0.0, -0.0), (-5.035, 0.0, 0.17), (-5.029, 0.0, 0.396), (-5.007, 0.0, 0.617), (-4.952, 0.0, 0.914), (-4.876, 0.0, 0.929), (-4.347, 0.0, 1.036), (-4.271, 0.0, 1.051), (-4.164, 0.0, 1.485), (-3.994, 0.0, 1.894), (-3.769, 0.0, 2.267), (-3.812, 0.0, 2.331), (-4.113, 0.0, 2.778), (-4.157, 0.0, 2.842), (-3.984, 0.0, 3.095), (-3.786, 0.0, 3.336), (-3.562, 0.0, 3.561), (-3.341, 0.0, 3.782), (-3.104, 0.0, 3.976), (-2.856, 0.0, 4.147), (-2.791, 0.0, 4.104), (-2.342, 0.0, 3.805), (-2.278, 0.0, 3.763), (-1.905, 0.0, 3.988), (-1.497, 0.0, 4.16), (-1.063, 0.0, 4.267), (-1.048, 0.0, 4.343), (-0.944, 0.0, 4.872), (-0.93, 0.0, 4.948), (-0.629, 0.0, 5.005), (-0.319, 0.0, 5.036), (-0.001, 0.0, 5.036), (0.311, 0.0, 5.036), (0.616, 0.0, 5.006), (0.913, 0.0, 4.951), (0.928, 0.0, 4.875), (1.035, 0.0, 4.345), (1.05, 0.0, 4.27), (1.484, 0.0, 4.163), (1.893, 0.0, 3.993), (2.266, 0.0, 3.768), (2.33, 0.0, 3.811), (2.777, 0.0, 4.112), (2.841, 0.0, 4.155), (3.094, 0.0, 3.983), (3.335, 0.0, 3.785), (3.56, 0.0, 3.561), (3.781, 0.0, 3.34), (3.975, 0.0, 3.103), (4.146, 0.0, 2.855), (4.103, 0.0, 2.79), (3.804, 0.0, 2.341), (3.761, 0.0, 2.276), (3.987, 0.0, 1.904), (4.158, 0.0, 1.496), (4.266, 0.0, 1.062), (4.342, 0.0, 1.047), (4.871, 0.0, 0.943), (4.947, 0.0, 0.928), (5.004, 0.0, 0.628), (5.034, 0.0, 0.324), (5.035, 0.0, 0.074), (5.035, 0.0, -0.0)],d=3)
	return mc.curve(name=shapeName, p=[(0.0, -22.37, 0.0), (0.0, -22.361, -0.755), (0.0, -22.334, -1.76), (0.0, -22.241, -2.742), (0.0, -21.997, -4.062), (0.0, -21.659, -4.128), (0.0, -19.304, -4.604), (0.0, -18.97, -4.67), (0.0, -18.495, -6.599), (0.0, -17.739, -8.416), (0.0, -16.74, -10.074), (0.0, -16.931, -10.358), (0.0, -18.268, -12.345), (0.0, -18.459, -12.629), (0.0, -17.695, -13.753), (0.0, -16.815, -14.824), (0.0, -15.82, -15.824), (0.0, -14.838, -16.806), (0.0, -13.784, -17.668), (0.0, -12.678, -18.428), (0.0, -12.394, -18.237), (0.0, -10.394, -16.908), (0.0, -10.11, -16.722), (0.0, -8.456, -17.722), (0.0, -6.639, -18.486), (0.0, -4.715, -18.961), (0.0, -4.648, -19.299), (0.0, -4.186, -21.65), (0.0, -4.119, -21.988), (0.0, -2.782, -22.241), (0.0, -1.404, -22.379), (-0.0, 0.004, -22.379), (-0.0, 1.395, -22.379), (-0.0, 2.751, -22.245), (-0.0, 4.066, -22.001), (-0.0, 4.133, -21.663), (-0.0, 4.608, -19.308), (-0.0, 4.675, -18.975), (-0.0, 6.603, -18.499), (-0.0, 8.421, -17.744), (-0.0, 10.078, -16.744), (-0.0, 10.363, -16.935), (-0.0, 12.354, -18.273), (-0.0, 12.634, -18.464), (-0.0, 13.758, -17.699), (-0.0, 14.833, -16.82), (-0.0, 15.829, -15.824), (-0.0, 16.811, -14.842), (-0.0, 17.673, -13.789), (-0.0, 18.433, -12.687), (-0.0, 18.242, -12.398), (-0.0, 16.913, -10.403), (-0.0, 16.726, -10.114), (-0.0, 17.726, -8.461), (-0.0, 18.49, -6.648), (-0.0, 18.966, -4.719), (-0.0, 19.304, -4.653), (-0.0, 21.659, -4.19), (-0.0, 21.992, -4.124), (-0.0, 22.245, -2.791), (-0.0, 22.379, -1.44), (-0.0, 22.383, -0.329), (-0.0, 22.383, 0.0), (-0.0, 22.374, 0.755), (-0.0, 22.348, 1.76), (-0.0, 22.25, 2.742), (-0.0, 22.005, 4.062), (-0.0, 21.668, 4.128), (-0.0, 19.317, 4.604), (-0.0, 18.979, 4.67), (-0.0, 18.504, 6.599), (-0.0, 17.748, 8.416), (-0.0, 16.748, 10.074), (-0.0, 16.94, 10.358), (-0.0, 18.277, 12.345), (-0.0, 18.473, 12.629), (-0.0, 17.704, 13.753), (-0.0, 16.824, 14.824), (-0.0, 15.829, 15.824), (-0.0, 14.847, 16.806), (-0.0, 13.793, 17.668), (-0.0, 12.691, 18.428), (-0.0, 12.402, 18.237), (-0.0, 10.407, 16.908), (-0.0, 10.123, 16.722), (-0.0, 8.465, 17.722), (-0.0, 6.652, 18.486), (-0.0, 4.724, 18.961), (-0.0, 4.657, 19.299), (-0.0, 4.195, 21.65), (-0.0, 4.133, 21.988), (-0.0, 2.795, 22.241), (-0.0, 1.418, 22.379), (-0.0, 0.004, 22.379), (0.0, -1.382, 22.379), (0.0, -2.737, 22.245), (0.0, -4.057, 22.001), (0.0, -4.124, 21.663), (0.0, -4.599, 19.308), (0.0, -4.666, 18.975), (0.0, -6.595, 18.499), (0.0, -8.412, 17.744), (0.0, -10.07, 16.744), (0.0, -10.354, 16.935), (0.0, -12.34, 18.273), (0.0, -12.625, 18.464), (0.0, -13.749, 17.699), (0.0, -14.82, 16.82), (0.0, -15.82, 15.824), (0.0, -16.802, 14.842), (0.0, -17.664, 13.789), (0.0, -18.424, 12.687), (0.0, -18.233, 12.398), (0.0, -16.904, 10.403), (0.0, -16.713, 10.114), (0.0, -17.717, 8.461), (0.0, -18.477, 6.648), (0.0, -18.957, 4.719), (0.0, -19.295, 4.653), (0.0, -21.645, 4.19), (0.0, -21.983, 4.124), (0.0, -22.236, 2.791), (0.0, -22.37, 1.44), (0.0, -22.374, 0.329), (0.0, -22.374, 0.0)],d=3)


# Square
def squareShape(shapeName):
	"""Creates Square Shape
	"""
	return mc.curve(name=shapeName, p=[(-10.262, 25.149, 0.0), (-10.262, 3.94, 0.0), (10.947, 3.94, 0.0), (10.947, 25.149, 0.0), (-10.262, 25.149, 0.0)],d=1)

	
#Triangle
def triangleShape(shapeName):
	"""Creates Triangle Shape
	"""
	return mc.curve(name=shapeName, p=[(8.0, 0.0, 8.0), (0.0, 0.0, -8.0), (-8.0, 0.0, 8.0), (8.0, 0.0, 8.0)],d=1)

	
#R hand
def handShape(shapeName):
	"""Creates Hand Shape
	"""
	return mc.curve(name=shapeName, p=[[-9.41, -0.0, 17.581], [-9.466, -0.0, 7.084], [-9.523, -0.0, -3.417], [-9.579, -0.0, -13.915], [-13.587, -0.0, -13.915], [-17.595, -0.0, -13.915], [-21.602, -0.0, -13.915], [-27.461, -0.0, -26.048], [-54.712, -0.0, -22.888], [-72.91, -0.0, -22.889], [-79.322, -0.0, -22.89], [-93.024, 0.0, -23.557], [-93.23, 0.0, -19.333], [-93.358, 0.0, -13.496], [-76.117, 0.0, -14.761], [-69.862, -0.0, -14.761], [-67.798, -0.0, -14.762], [-63.67, -0.0, -15.331], [-62.75, -0.0, -14.084], [-62.75, -0.0, -13.745], [-62.75, -0.0, -13.407], [-62.75, -0.0, -13.068], [-64.993, -0.0, -12.306], [-68.901, -0.0, -12.729], [-71.725, -0.0, -12.729], [-78.949, 0.0, -12.729], [-93.351, 0.0, -12.729], [-93.399, 0.0, -12.729], [-93.435, 0.0, -12.732], [-104.039, 0.0, -13.412], [-103.39, 0.0, -8.327], [-103.194, 0.0, -6.792], [-102.019, 0.0, -4.939], [-99.495, 0.0, -4.771], [-89.901, 0.0, -4.714], [-81.658, 0.0, -4.658], [-72.063, 0.0, -4.601], [-69.707, 0.0, -4.602], [-63.809, -0.0, -5.371], [-62.75, -0.0, -3.924], [-62.75, -0.0, -3.698], [-62.75, -0.0, -3.472], [-62.75, -0.0, -3.247], [-62.986, 0.0, -2.921], [-62.767, -0.0, -3.145], [-63.089, 0.0, -2.908], [-64.988, 0.0, -1.8], [-70.117, 0.0, -2.569], [-72.741, 0.0, -2.569], [-81.037, 0.0, -2.626], [-89.336, 0.0, -2.682], [-97.633, 0.0, -2.739], [-102.857, 0.0, -2.825], [-108.641, 0.0, -3.552], [-109.486, 0.0, 0.817], [-110.59, 0.0, 6.524], [-103.286, 0.0, 5.559], [-98.479, 0.0, 5.559], [-86.627, 0.0, 5.615], [-74.772, 0.0, 5.672], [-62.919, 0.0, 5.728], [-62.806, 0.0, 5.954], [-62.694, 0.0, 6.18], [-62.581, 0.0, 6.405], [-62.75, 0.0, 6.744], [-62.919, 0.0, 7.083], [-63.089, 0.0, 7.421], [-73.248, 0.0, 7.421], [-83.41, 0.0, 7.421], [-93.569, 0.0, 7.421], [-98.186, 0.0, 7.421], [-103.84, 0.0, 6.95], [-103.39, 0.0, 11.824], [-102.956, 0.0, 16.528], [-97.817, 0.0, 15.719], [-92.722, 0.0, 15.719], [-82.789, 0.0, 15.775], [-72.853, 0.0, 15.832], [-62.919, 0.0, 15.888], [-62.863, 0.0, 16.057], [-62.806, 0.0, 16.227], [-62.75, 0.0, 16.396], [-62.753, 0.0, 16.914], [-62.787, 0.0, 17.049], [-63.089, 0.0, 17.581], [-73.233, 0.0, 17.398], [-81.118, 0.0, 16.708], [-81.885, 0.0, 26.048], [-67.267, 0.0, 26.048], [-52.645, 0.0, 26.048], [-38.027, 0.0, 26.048], [-28.802, -0.0, 23.67], [-27.917, -0.0, 22.505], [-21.771, -0.0, 17.581], [-17.651, -0.0, 17.581], [-13.53, -0.0, 17.581], [-9.41, -0.0, 17.581]],d=3)


def diamondShape(shapeName):
	"""Creates Diamond Shape
	"""
	return mc.curve(name=shapeName, p=[(0.0, 5.0, 0.0), (-5.0, 0.0, 0.0), (0.0, 0.0, 5.0), (0.0, 5.0, 0.0), (0.0, 0.0, 5.0), (0.0, -5.0, 0.0), (0.0, 0.0, -5.0), (0.0, 5.0, 0.0), (-5.0, 0.0, 0.0), (0.0, -5.0, 0.0), (5.0, 0.0, 0.0), (0.0, 5.0, 0.0), (0.0, 0.0, 5.0), (-5.0, 0.0, 0.0), (0.0, 0.0, -5.0), (5.0, 0.0, 0.0), (0.0, 0.0, 5.0)],d=1)
































